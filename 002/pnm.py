#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Copyright (C) 2019 Ahirui Otsu

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

class PpmImage(object):
    def __init__(self):
        """
        (0, 0) ---------------------------------------------> (0, x)
          |                        width
          |         /-----------------------------------\
          |     [
          |         [[R, G, B], [R, G, B], ..., [R, G, B]], \
          |         [[R, G, B], [R, G, B], ..., [R, G, B]],  |
          |         ...,                                     |  height
          |         [[R, G, B], [R, G, B], ..., [R, G, B]]  /
          V     ]
        (y, 0)
        """
        self.pixels = None
        self.width = None # len(im[0])
        self.height = None # len(im)
        self.max_val = None

class PgmImage(object):
    def __init__(self):
        """
        (0, 0) -------------------------------------> (0, x)
          |                   width
          |         /-----------------------\
          |     [
          |         [value, value, ..., value], \
          |         [value, value, ..., value],  |
          |         ...,                         |  height
          |         [value, value, ..., value]  /
          V     ]
        (y, 0)
        """
        self.pixels = None
        self.width = None # len(im[0])
        self.height = None # len(im)
        self.max_val = None

class PbmImage(object):
    def __init__(self):
        """
        (0, 0) -------------------------------------> (0, x)
          |                   width
          |         /-----------------------\
          |     [
          |         [value, value, ..., value], \
          |         [value, value, ..., value],  |
          |         ...,                         |  height
          |         [value, value, ..., value]  /
          V     ]
        (y, 0)
        """
        self.pixels = None
        self.width = None # len(im[0])
        self.height = None # len(im)

# A simple function that read a ASCII PPM image.
# It has no error checks.
def p3read(filename):
    data = _readfile(filename)
    #assert data[0] == 'P3'
    w = int(data[1])
    h = int(data[2])
    w3 = w * 3
    px = [[
        list(map(int, data[i + j:i + j + 3]))
        for j in range(0, w3, 3)
    ] for i in range(4, 4 + w3 * h, w3)
    ]
    im = PpmImage()
    im.pixels = px
    im.width = w
    im.height = h
    im.max_val = int(data[3])
    return im

def p3write(im, filename):
    with open(filename, 'w') as f:
        f.write(f'P3\n'
                f'# Generated by p3write()!\n'
                f'{im.width} {im.height}\n'
                f'{im.max_val}\n')
        f.writelines(f'{r} {g} {b}\n' for x in im.pixels for r, g, b in x)

# A simple function that read a ASCII PGM image.
# It has no error checks.
def p2read(filename):
    data = _readfile(filename)
    #assert data[0] == 'P2'
    w = int(data[1])
    h = int(data[2])
    px = [list(map(int, data[i:i + w])) for i in range(4, len(data), w)]
    im = PgmImage()
    im.pixels = px
    im.width = w
    im.height = h
    im.max_val = int(data[3])
    return im

def p2write(im, filename):
    with open(filename, 'w') as f:
        f.write(f'P2\n'
                f'# Generated by p2write()!\n'
                f'{im.width} {im.height}\n'
                f'{im.max_val}\n')
        f.writelines(''.join(['\n'.join(map(str, x)), '\n'])
                     for x in im.pixels)

# A simple function that read a ASCII PBM image.
# It has no error checks.
def p1read(filename):
    data = _readfile(filename)
    #assert data[0] == 'P1'
    w = int(data[1])
    h = int(data[2])
    data = [int(c) for l in data[3:] for c in l]
    px = [data[i:i + w] for i in range(0, len(data), w)]
    im = PgmImage()
    im.pixels = px
    im.width = w
    im.height = h
    return im

def p1write(im, filename):
    with open(filename, 'w') as f:
        f.write(f'P1\n'
                f'# Generated by p1write()!\n'
                f'{im.width} {im.height}\n')
        f.writelines(''.join([''.join(map(str, x)), '\n'])
                     for x in im.pixels)

def _readfile(filename):
    with open(filename) as f:
        data = tuple(v for l in\
                     (l.rstrip() for l in f.readlines() if not l.startswith('#'))
                     for v in l.split())
    return data
